/************************************************************************************************************************
*************************************************************V2.0*******************************************************
************************************************************************************************************************/
新实现：
1.复制文件夹
2.文件计数
3.更新进度条

```C++
// CopyFoldersDlg.cpp : implementation file
//

#include "stdafx.h"
#include "CopyFolders.h"
#include "CopyFoldersDlg.h"
#include "windows.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

static int count = 0; 
#define WM_USER_PROCESS (WM_USER+101)  

void CopyDirectory(CString source, CString target,CWnd * pWndMsg);  
/////////////////////////////////////////////////////////////////////////////
// CAboutDlg dialog used for App About

class CAboutDlg : public CDialog
{
public:
	CAboutDlg();

// Dialog Data
	//{{AFX_DATA(CAboutDlg)
	enum { IDD = IDD_ABOUTBOX };
	//}}AFX_DATA

	// ClassWizard generated virtual function overrides
	//{{AFX_VIRTUAL(CAboutDlg)
	protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV support
	//}}AFX_VIRTUAL

// Implementation
protected:
	//{{AFX_MSG(CAboutDlg)
	//}}AFX_MSG
	DECLARE_MESSAGE_MAP()
};

CAboutDlg::CAboutDlg() : CDialog(CAboutDlg::IDD)
{
	//{{AFX_DATA_INIT(CAboutDlg)
	//}}AFX_DATA_INIT
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CAboutDlg)
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialog)
	//{{AFX_MSG_MAP(CAboutDlg)
		// No message handlers
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CCopyFoldersDlg dialog

CCopyFoldersDlg::CCopyFoldersDlg(CWnd* pParent /*=NULL*/)
	: CDialog(CCopyFoldersDlg::IDD, pParent)
{
	//{{AFX_DATA_INIT(CCopyFoldersDlg)
	m_SrcPath = _T("");
	m_DesPath = _T("");
	//}}AFX_DATA_INIT
	// Note that LoadIcon does not require a subsequent DestroyIcon in Win32
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
}

void CCopyFoldersDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CCopyFoldersDlg)
	DDX_Control(pDX, IDC_PROGRESS, m_Progress);
	DDX_Text(pDX, IDC_EDIT1, m_SrcPath);
	DDX_Text(pDX, IDC_EDIT2, m_DesPath);
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CCopyFoldersDlg, CDialog)
	//{{AFX_MSG_MAP(CCopyFoldersDlg)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_BN_CLICKED(IDC_START, OnStart)
	ON_BN_CLICKED(IDC_STOP, OnStop)
	ON_MESSAGE(WM_USER_PROCESS, Do_process)  
	ON_WM_TIMER()  
 
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CCopyFoldersDlg message handlers

BOOL CCopyFoldersDlg::OnInitDialog()
{
	CDialog::OnInitDialog();

	// Add "About..." menu item to system menu.

	// IDM_ABOUTBOX must be in the system command range.
	ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
	ASSERT(IDM_ABOUTBOX < 0xF000);

	CMenu* pSysMenu = GetSystemMenu(FALSE);
	if (pSysMenu != NULL)
	{
		CString strAboutMenu;
		strAboutMenu.LoadString(IDS_ABOUTBOX);
		if (!strAboutMenu.IsEmpty())
		{
			pSysMenu->AppendMenu(MF_SEPARATOR);
			pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);
		}
	}

	// Set the icon for this dialog.  The framework does this automatically
	//  when the application's main window is not a dialog
	SetIcon(m_hIcon, TRUE);			// Set big icon
	SetIcon(m_hIcon, FALSE);		// Set small icon
	
	// TODO: Add extra initialization here
	
	return TRUE;  // return TRUE  unless you set the focus to a control
}

void CCopyFoldersDlg::OnSysCommand(UINT nID, LPARAM lParam)
{
	if ((nID & 0xFFF0) == IDM_ABOUTBOX)
	{
		CAboutDlg dlgAbout;
		dlgAbout.DoModal();
	}
	else
	{
		CDialog::OnSysCommand(nID, lParam);
	}
}

// If you add a minimize button to your dialog, you will need the code below
//  to draw the icon.  For MFC applications using the document/view model,
//  this is automatically done for you by the framework.

void CCopyFoldersDlg::OnPaint() 
{
	if (IsIconic())
	{
		CPaintDC dc(this); // device context for painting

		SendMessage(WM_ICONERASEBKGND, (WPARAM) dc.GetSafeHdc(), 0);

		// Center icon in client rectangle
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// Draw the icon
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialog::OnPaint();
	}
}

// The system calls this to obtain the cursor to display while the user drags
//  the minimized window.
HCURSOR CCopyFoldersDlg::OnQueryDragIcon()
{
	return (HCURSOR) m_hIcon;
}



//复制函数
void CopyDirectory(CString source, CString target, CCopyFoldersDlg * pDlgMsg)    
{
	CreateDirectory(target,NULL);   
  
    CFileFind finder;    
    CString path;    
    path.Format(_T("%s\\*.*"),source);    
  
    BOOL bWorking = finder.FindFile(path);    
    while(bWorking)  
    {   
        bWorking = finder.FindNextFile();   
           
        if(finder.IsDirectory() && !finder.IsDots())  
        {   
            CopyDirectory(finder.GetFilePath(),target+_T("\\")+finder.GetFileName(), pDlgMsg);  //递归 
        }    
        else  
        {      
            CopyFile(finder.GetFilePath(),target+_T("\\")+finder.GetFileName(),FALSE);   
            count++;  
            pDlgMsg->PostMessage(WM_USER_PROCESS,count);  
          
  
             Sleep(50);   
        }   
    }    
}

VOID GetInfo(CString csPath, long& FoldersNum, long& FilesNum)  
{     
    SetCurrentDirectory(csPath);  
    CFileFind finder;  
    BOOL bWorking = finder.FindFile(_T("*.*"));  
    while(bWorking)  
    {  
        bWorking = finder.FindNextFile();  
  
        if(finder.IsDots())   
        {  
            continue;  
        }  
        else if(finder.IsDirectory())  
        {  
            ++FoldersNum;  
            GetInfo(finder.GetFilePath(), FoldersNum, FilesNum);  
        }  
        else  
        {  
            ++FilesNum;  
        }  
    }  
      
}  

//复制线程
DWORD WINAPI CCopyFoldersDlg::CopyFolders(LPVOID pParam)
{  
	CCopyFoldersDlg* pDlg = (CCopyFoldersDlg*)pParam;  

	 if (!pDlg) 
	 {
		 return 0;  
	 }
	 ResetEvent(pDlg->hExit);  

	long FoldersNum  = 0;                 
    long FilesNum = 0;                  
    GetInfo(pDlg->m_SrcPath,FoldersNum, FilesNum);  
	pDlg->m_Progress.SetRange(0,FilesNum);  
    pDlg->m_Progress.SetStep(1); 
	CopyDirectory(pDlg->m_SrcPath, pDlg->m_DesPath, pDlg);   

	SetEvent(pDlg->hExit);  
	return 0;
}

LRESULT CCopyFoldersDlg::Do_process(WPARAM wParam, LPARAM lParam)   
{   
   wParam += 1;  
   m_Progress.SetPos(wParam);    
    return 0;  
}         
  



void CCopyFoldersDlg::OnStart() 
{
	UpdateData(true);

	if ((m_SrcPath.IsEmpty() && m_DesPath.IsEmpty()))
	{
		MessageBox("路径不能为空！");
		return;
	}

	else
	{
		//开始线程
		hThread = CreateThread(NULL, 0, CopyFolders, this, 0, NULL);
		CloseHandle(hThread);
	}
}


void CCopyFoldersDlg::OnStop() 
{
//	m_iStatus++;  
         
   // if (m_iStatus % 2 == 0)  
    //{    
        SuspendThread(GetCurrentThread());  
    /*}   
    else  
    {  
        ResumeThread(hThread);  
    }  */
}

void CCopyFoldersDlg::OnTimer(UINT_PTR nIDEvent)  
{  
    CDialog::OnTimer(nIDEvent);  
}  
```

```C++
// CopyFoldersDlg.h : header file
//

#if !defined(AFX_COPYFOLDERSDLG_H__BADF1BD0_296B_4FED_96F7_BCD2628D4B03__INCLUDED_)
#define AFX_COPYFOLDERSDLG_H__BADF1BD0_296B_4FED_96F7_BCD2628D4B03__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000



/////////////////////////////////////////////////////////////////////////////
// CCopyFoldersDlg dialog

class CCopyFoldersDlg : public CDialog
{
// Construction
public:
	CCopyFoldersDlg(CWnd* pParent = NULL);	// standard constructor
				
	HANDLE hThread;
	HANDLE hExit;  
	static DWORD WINAPI CopyFolders(LPVOID pParam);
	int m_iStatus;  

// Dialog Data
	//{{AFX_DATA(CCopyFoldersDlg)
	enum { IDD = IDD_COPYFOLDERS_DIALOG };
	CProgressCtrl	m_Progress;
	CString	m_SrcPath;
	CString	m_DesPath;
	//}}AFX_DATA

	// ClassWizard generated virtual function overrides
	//{{AFX_VIRTUAL(CCopyFoldersDlg)
	protected:
	virtual void DoDataExchange(CDataExchange* pDX);	// DDX/DDV support
	//}}AFX_VIRTUAL

// Implementation
protected:
	HICON m_hIcon;





	// Generated message map functions
	//{{AFX_MSG(CCopyFoldersDlg)
	virtual BOOL OnInitDialog();
	afx_msg void OnSysCommand(UINT nID, LPARAM lParam);
	afx_msg void OnPaint();
	afx_msg HCURSOR OnQueryDragIcon();
	afx_msg void OnStart();
	afx_msg void OnStop();
	afx_msg LRESULT CCopyFoldersDlg::Do_process(WPARAM wParam,LPARAM lParam); 
    afx_msg void OnTimer(UINT_PTR nIDEvent);  
	//}}AFX_MSG
	DECLARE_MESSAGE_MAP()
};

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(AFX_COPYFOLDERSDLG_H__BADF1BD0_296B_4FED_96F7_BCD2628D4B03__INCLUDED_)
```

/************************************************************************************************************************
*************************************************************V1.0*******************************************************
************************************************************************************************************************/
实现：1.自动创建目标文件夹复制文件
2.多线程

```C++
// CopyFoldersDlg.cpp : implementation file
//

#include "stdafx.h"
#include "CopyFolders.h"
#include "CopyFoldersDlg.h"


#define MAXPROGRESS WM_USER+1
#define PROCESS WM_USER+2

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

/////////////////////////////////////////////////////////////////////////////
// CAboutDlg dialog used for App About

class CAboutDlg : public CDialog
{
public:
	CAboutDlg();

// Dialog Data
	//{{AFX_DATA(CAboutDlg)
	enum { IDD = IDD_ABOUTBOX };
	//}}AFX_DATA

	// ClassWizard generated virtual function overrides
	//{{AFX_VIRTUAL(CAboutDlg)
	protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV support
	//}}AFX_VIRTUAL

// Implementation
protected:
	//{{AFX_MSG(CAboutDlg)
	//}}AFX_MSG
	DECLARE_MESSAGE_MAP()
};

CAboutDlg::CAboutDlg() : CDialog(CAboutDlg::IDD)
{
	//{{AFX_DATA_INIT(CAboutDlg)
	//}}AFX_DATA_INIT
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CAboutDlg)
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialog)
	//{{AFX_MSG_MAP(CAboutDlg)
		// No message handlers
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CCopyFoldersDlg dialog

CCopyFoldersDlg::CCopyFoldersDlg(CWnd* pParent /*=NULL*/)
	: CDialog(CCopyFoldersDlg::IDD, pParent)
{
	//{{AFX_DATA_INIT(CCopyFoldersDlg)
	m_SrcPath = _T("");
	m_DesPath = _T("");
	//}}AFX_DATA_INIT
	// Note that LoadIcon does not require a subsequent DestroyIcon in Win32
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
}

void CCopyFoldersDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CCopyFoldersDlg)
	DDX_Control(pDX, IDC_PROGRESS, m_ProgressCtrl);
	DDX_Text(pDX, IDC_EDIT1, m_SrcPath);
	DDX_Text(pDX, IDC_EDIT2, m_DesPath);
	DDX_Control(pDX, IDC_START, m_StartBn);
	DDX_Control(pDX, IDC_STOP, m_StopBn);
	DDX_Control(pDX, IDC_PROGRESS, m_ProgressCtrl);
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CCopyFoldersDlg, CDialog)
	//{{AFX_MSG_MAP(CCopyFoldersDlg)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_BN_CLICKED(IDC_START, OnStart)
	ON_MESSAGE(MAXPROGRESS, CCopyFoldersDlg::MaxProgress)
	ON_MESSAGE(PROCESS, CCopyFoldersDlg::Process)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CCopyFoldersDlg message handlers

BOOL CCopyFoldersDlg::OnInitDialog()
{
	CDialog::OnInitDialog();

	// Add "About..." menu item to system menu.

	// IDM_ABOUTBOX must be in the system command range.
	ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
	ASSERT(IDM_ABOUTBOX < 0xF000);

	CMenu* pSysMenu = GetSystemMenu(FALSE);
	if (pSysMenu != NULL)
	{
		CString strAboutMenu;
		strAboutMenu.LoadString(IDS_ABOUTBOX);
		if (!strAboutMenu.IsEmpty())
		{
			pSysMenu->AppendMenu(MF_SEPARATOR);
			pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);
		}
	}

	// Set the icon for this dialog.  The framework does this automatically
	//  when the application's main window is not a dialog
	SetIcon(m_hIcon, TRUE);			// Set big icon
	SetIcon(m_hIcon, FALSE);		// Set small icon
	
	// TODO: Add extra initialization here
	m_ProgressCtrl.SetRange(0, 100);
	m_ProgressCtrl.SetPos(0);


	return TRUE;  // return TRUE  unless you set the focus to a control
}

void CCopyFoldersDlg::OnSysCommand(UINT nID, LPARAM lParam)
{
	if ((nID & 0xFFF0) == IDM_ABOUTBOX)
	{
		CAboutDlg dlgAbout;
		dlgAbout.DoModal();
	}
	else
	{
		CDialog::OnSysCommand(nID, lParam);
	}
}

// If you add a minimize button to your dialog, you will need the code below
//  to draw the icon.  For MFC applications using the document/view model,
//  this is automatically done for you by the framework.

void CCopyFoldersDlg::OnPaint() 
{
	if (IsIconic())
	{
		CPaintDC dc(this); // device context for painting

		SendMessage(WM_ICONERASEBKGND, (WPARAM) dc.GetSafeHdc(), 0);

		// Center icon in client rectangle
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// Draw the icon
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialog::OnPaint();
	}
}

// The system calls this to obtain the cursor to display while the user drags
//  the minimized window.
HCURSOR CCopyFoldersDlg::OnQueryDragIcon()
{
	return (HCURSOR) m_hIcon;
}

void CCopyFoldersDlg::OnStart() 
{
	UpdateData(true);

	if ((m_SrcPath.IsEmpty() && m_DesPath.IsEmpty()))
	{
		MessageBox("路径不能为空！");
		return;
	}

	else
	{
		//设置停止按钮enable
		m_StopBn.EnableWindow(TRUE);
		m_StartBn.EnableWindow(FALSE);
		
		//开始线程
		hThread = CreateThread(NULL, 0, CopyFolders, this, 0, NULL);
	}
}

// 文件复制线程
DWORD WINAPI CCopyFoldersDlg::CopyFolders(LPVOID pParam)
{
	
	double add = 0 , count = 0;

	CString desPath = ((CCopyFoldersDlg*)pParam)->m_DesPath + L"\\";
	CFileFind findcount;
	BOOL target = findcount.FindFile(((CCopyFoldersDlg*)pParam)->m_SrcPath + CString("\\*.*"));
	
	
	//获取文件数目
	while (target)
	{
		target = findcount.FindNextFile();

		if (findcount.IsDirectory())
		{
			continue;
		}
		else
		{
			((CCopyFoldersDlg*)pParam)->PostMessage(MAXPROGRESS);
		}
	}
	findcount.Close();

	CFileFind find;
	target = find.FindFile(((CCopyFoldersDlg*)pParam)->m_SrcPath + CString("\\*.*"));

	//复制
	
	while (target)
	{
		target = find.FindNextFile();
	
		
		if (find.IsDirectory())
		{
			continue;
		}
		else
		{
			((CCopyFoldersDlg*)pParam)->m_SrcPath = find.GetFilePath();
			((CCopyFoldersDlg*)pParam)->m_DesPath = desPath + find.GetFileName();
			CreateDirectory(desPath,NULL);
			CopyFile(((CCopyFoldersDlg*)pParam)->m_SrcPath, ((CCopyFoldersDlg*)pParam)->m_DesPath, FALSE);
			((CCopyFoldersDlg*)pParam)->PostMessage(PROCESS);
		
			
		}
	}

	find.Close();
	
	((CCopyFoldersDlg*)pParam)->m_StartBn.EnableWindow(TRUE);
	((CCopyFoldersDlg*)pParam)->m_StopBn.EnableWindow(FALSE);
	return 0;
}

afx_msg LRESULT CCopyFoldersDlg::MaxProgress(WPARAM wParam, LPARAM lParam)
{
	m_count++;
	return 0;
}


afx_msg LRESULT CCopyFoldersDlg::Process(WPARAM wParam, LPARAM lParam)
{
	m_add++;
	m_ProgressCtrl.SetPos(m_add / m_count * 100);
	return 0;
}
```

```C++
// CopyFoldersDlg.h : header file
//

#if !defined(AFX_COPYFOLDERSDLG_H__CC714D7E_D725_403C_A476_1765A8EADAE0__INCLUDED_)
#define AFX_COPYFOLDERSDLG_H__CC714D7E_D725_403C_A476_1765A8EADAE0__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000

/////////////////////////////////////////////////////////////////////////////
// CCopyFoldersDlg dialog

class CCopyFoldersDlg : public CDialog
{
// Construction
public:
	CCopyFoldersDlg(CWnd* pParent = NULL);	// standard constructor

// Dialog Data
	//{{AFX_DATA(CCopyFoldersDlg)
	enum { IDD = IDD_COPYFOLDERS_DIALOG };
	CProgressCtrl	m_ProgressCtrl;
	CString	m_SrcPath;
	CString	m_DesPath;
	//}}AFX_DATA

	// ClassWizard generated virtual function overrides
	//{{AFX_VIRTUAL(CCopyFoldersDlg)
	protected:
	virtual void DoDataExchange(CDataExchange* pDX);	// DDX/DDV support
	//}}AFX_VIRTUAL

// Implementation
protected:
	HICON m_hIcon;
public:
	HANDLE hThread;

	double m_add;
	double m_count;
	CButton m_StartBn;
	CButton m_StopBn;
	static DWORD WINAPI CopyFolders(LPVOID pParam);
	afx_msg LRESULT MaxProgress(WPARAM wParam, LPARAM lParam);
	afx_msg LRESULT Process(WPARAM wParam, LPARAM lParam);


	// Generated message map functions
	//{{AFX_MSG(CCopyFoldersDlg)
	virtual BOOL OnInitDialog();
	afx_msg void OnSysCommand(UINT nID, LPARAM lParam);
	afx_msg void OnPaint();
	afx_msg HCURSOR OnQueryDragIcon();
	afx_msg void OnStart();
	//}}AFX_MSG
	DECLARE_MESSAGE_MAP()
};

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(AFX_COPYFOLDERSDLG_H__CC714D7E_D725_403C_A476_1765A8EADAE0__INCLUDED_)

```
